generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  adminId   Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      String
  actions   Json
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@map(name: "admin")
}

model Client {
  clientId    Int       @id @default(autoincrement())
  name        String?
  lastName    String?
  address     String?
  email       String?   @unique
  phoneNumber Int?      @unique
  typeUser    String
  loans       Loan[]
  <<<<<<< HEAD
  Reserve     Reserve[]
  =======
  fine        Fine[]
  >>>>>>> feat: fines crud

  @@map(name: "client")
}

model Material {
  materialId      Int       @id @default(autoincrement())
  title           String?
  author          String?
  category        String?
  isbn            String?   @unique
  publicationYear Int?
  pageCount       Int?
  quantity        Int?
  available       Boolean
  type_material   String
  loans           Loan[]
  Reserve         Reserve[]

  @@map(name: "material")
}

model Loan {
  loanId     Int       @id @unique @default(autoincrement())
  clientId   Int
  materialId Int
  loanDate   DateTime  @default(now()) @db.Timestamptz(3)
  returnDate DateTime? @db.Timestamptz(3)
  returned   Boolean   @default(false)
  client     Client    @relation(fields: [clientId], references: [clientId], onDelete: Cascade)
  material   Material  @relation(fields: [materialId], references: [materialId], onDelete: Cascade)
  return     Return?
  Fine       Fine[]

  @@map(name: "loan")
}

model Office {
  officeId         String             @id @default(uuid())
  name             String             @unique
  createdAt        DateTime           @default(now()) @db.Timestamptz()
  updatedAt        DateTime           @default(now()) @db.Timestamptz()
  MaterialsChanges MaterialsChanges[]

  @@map(name: "office")
}

model MaterialsChanges {
  changeId   Int      @id @default(autoincrement())
  officeId   String
  materialId Int
  changeType String
  changeDate DateTime @default(now()) @db.Timestamptz()
  oldData    Json?
  newData    Json?

  office Office @relation(fields: [officeId], references: [officeId], onDelete: Cascade)

  @@index([officeId], name: "materials_changes_officeId_index")
  @@map(name: "materials_changes")
}

model Return {
  returnId   Int      @id @default(autoincrement())
  returnDate DateTime @default(now()) @db.Timestamptz(3)
  loan       Loan?    @relation(fields: [loanId], references: [loanId], onDelete: Cascade)
  loanId     Int?     @unique

  @@map(name: "returns")
}

model Reserve {
  reserveId  Int       @id @default(autoincrement())
  clientId   Int
  materialId Int
  checkDate  DateTime  @default(now()) @db.Timestamptz()
  returnDate DateTime  @db.Timestamptz()
  executed   Boolean   @default(false)
  client     Client?   @relation(fields: [clientId], references: [clientId], onDelete: Cascade)
  material   Material? @relation(fields: [materialId], references: [materialId], onDelete: Cascade)

  @@map(name: "reserve")
}

model Notification {
  notificationId      Int      @id @default(autoincrement())
  notificationName    String
  notificationType    String
  notificationDate    DateTime @default(now()) @db.Timestamptz()
  notificationContent String?
  notificationRead    Boolean  @default(false)

  @@map(name: "notification")
}

model Fine {
  fineId     Int      @id @default(autoincrement())
  debt       Decimal
  createDate DateTime
  payeed     Boolean
  client     Client?  @relation(fields: [clientId], references: [clientId])
  loan       Loan?    @relation(fields: [loanId], references: [loanId])
  clientId   Int?
  loanId     Int?
}
